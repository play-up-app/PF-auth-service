name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'auth-service/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'auth-service/**'
  schedule:
    - cron: '0 2 * * *' # Ex√©cution quotidienne √† 2h du matin

jobs:
  test-coverage:
    name: üß™ Tests & Qualit√©
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: auth-service/package-lock.json

      - name: Installation des d√©pendances
        working-directory: auth-service
        run: npm ci

      - name: G√©n√©ration Prisma Client
        working-directory: auth-service
        run: npx prisma generate
        
      - name: Tests unitaires
        working-directory: auth-service
        run: npm run test:coverage
        env:
          NODE_ENV: "test"

      - name: V√©rification couverture
        working-directory: auth-service
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "‚ùå Couverture insuffisante : $COVERAGE%"
            exit 1
          fi
          echo "‚úÖ Couverture : $COVERAGE%"

  security:
    name: üõ°Ô∏è S√©curit√© & Accessibilit√©
    runs-on: ubuntu-latest
    needs: test-coverage

    steps:
      - uses: actions/checkout@v4

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://localhost:3000'
          cmd_options: '-a'

      - name: Test Accessibilit√©
        working-directory: auth-service
        run: |
          npm install -g @axe-core/cli
          axe http://localhost:3002 --exit

  build:
    name: üê≥ Build & Push
    runs-on: ubuntu-latest
    needs: [test-coverage, security]
    if: github.event_name != 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Version
        id: version
        run: |
          cd auth-service
          VERSION=$(npx semantic-release --dry-run | grep -oP 'The next release version is \K[0-9]+\.[0-9]+\.[0-9]+' || echo "0.0.1")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: auth-service
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/auth-service:v${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository }}/auth-service:latest
